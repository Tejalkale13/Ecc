AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template to create S3 bucket with versioning and Lambda email notifications'

Parameters:
  EmailAddress:
    Type: String
    Default: tejalbkale@gmail.com
    Description: Email address to receive notifications
  BucketName:
    Type: String
    Description: Name of the S3 bucket to create

Resources:
  # SNS Topic (Independent resource)
  NotificationTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: 
        Fn::Sub: ${AWS::StackName}-notifications
      Subscription:
        - Protocol: email
          Endpoint: 
            Ref: EmailAddress

  # Lambda Execution Role (Depends on SNS Topic)
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    DependsOn: NotificationTopic
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: S3AndSNSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource:
                  Ref: NotificationTopic

  # Lambda Function (Depends on Role)
  ProcessingFunction:
    Type: 'AWS::Lambda::Function'
    DependsOn: LambdaExecutionRole
    Properties:
      Handler: 'index.handler'
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          const sns = new AWS.SNS();
          
          exports.handler = async (event, context) => {
              try {
                  const bucket = event.Records[0].s3.bucket.name;
                  const key = event.Records[0].s3.object.key;
                  const size = event.Records[0].s3.object.size;
                  
                  const message = `
                      New file uploaded to S3:
                      Bucket: ${bucket}
                      File: ${key}
                      Size: ${size} bytes
                  `;
                  
                  await sns.publish({
                      TopicArn: process.env.SNS_TOPIC_ARN,
                      Subject: 'New S3 Upload Notification',
                      Message: message
                  }).promise();
                  
                  return {
                      statusCode: 200,
                      body: 'Notification sent successfully'
                  };
              } catch (error) {
                  console.error('Error:', error);
                  throw error;
              }
          }
      Runtime: 'nodejs18.x'
      Timeout: 30
      MemorySize: 128
      Environment:
        Variables:
          SNS_TOPIC_ARN: 
            Ref: NotificationTopic

  # Bucket Permission (Depends on Lambda)
  BucketPermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn: ProcessingFunction
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName:
        Ref: ProcessingFunction
      Principal: 's3.amazonaws.com'
      SourceArn:
        Fn::Sub: arn:aws:s3:::${BucketName}

  # S3 Bucket
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DependsOn: BucketPermission
    Properties:
      VersioningConfiguration:
        Status: Enabled
      BucketName: 
        Ref: BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Function: 
              Fn::GetAtt:
                - ProcessingFunction
                - Arn

Outputs:
  BucketName:
    Description: 'Name of the created S3 bucket'
    Value:
      Ref: S3Bucket
  SNSTopicARN:
    Description: 'ARN of the SNS Topic'
    Value:
      Ref: NotificationTopic